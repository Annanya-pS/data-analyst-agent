# -*- coding: utf-8 -*-
"""test_local.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Au1vg0IduzCfflHqv9GHAbBAloSQ-Wv
"""

#!/usr/bin/env python3
"""
Simple local test script for the Data Analyst Agent
Run this after starting your Flask app locally
"""

import requests
import json
import tempfile
import os

def test_local_api():
    """Test the API running locally"""

    API_URL = "http://localhost:5000"

    print("Testing local Data Analyst Agent API...")
    print(f"Base URL: {API_URL}")

    # Test 1: Check if server is running
    try:
        response = requests.get(f"{API_URL}/", timeout=5)
        print(f"‚úÖ Server is running: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"‚ùå Server not responding: {e}")
        print("   Make sure you've started the Flask app with: python app.py")
        return False

    # Test 2: Health check
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        print(f"‚úÖ Health check: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")

    # Test 3: API endpoint
    questions = """Scrape the list of highest grossing films from Wikipedia. It is at the URL:
https://en.wikipedia.org/wiki/List_of_highest-grossing_films

Answer the following questions and respond with a JSON array of strings containing the answer.

1. How many $2 bn movies were released before 2000?
2. Which is the earliest film that grossed over $1.5 bn?
3. What's the correlation between the Rank and Peak?
4. Draw a scatterplot of Rank and Peak along with a dotted red regression line through it."""

    # Create temporary file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
        f.write(questions)
        questions_path = f.name

    try:
        print("\nüöÄ Testing main API endpoint...")
        print("   This may take 1-3 minutes...")

        with open(questions_path, 'rb') as f:
            files = {'questions.txt': f}
            response = requests.post(f"{API_URL}/api/", files=files, timeout=300)

        print(f"   Status: {response.status_code}")

        if response.status_code == 200:
            try:
                result = response.json()
                print("‚úÖ SUCCESS! API returned:")

                if isinstance(result, list):
                    for i, item in enumerate(result, 1):
                        if isinstance(item, str) and item.startswith('data:image'):
                            print(f"   {i}. [BASE64 IMAGE - {len(item)} chars]")
                        else:
                            print(f"   {i}. {item}")
                else:
                    print(f"   {json.dumps(result, indent=4)}")

                print("\nüéâ Your API is working correctly!")
                print("   You can now deploy it to Heroku, Railway, or Render.")

            except json.JSONDecodeError as e:
                print(f"‚ùå JSON decode error: {e}")
                print(f"   Raw response: {response.text[:200]}...")
        else:
            print(f"‚ùå API returned error: {response.status_code}")
            print(f"   Response: {response.text}")

    except requests.exceptions.Timeout:
        print("‚ùå Request timed out after 5 minutes")
    except Exception as e:
        print(f"‚ùå Request failed: {e}")
    finally:
        # Cleanup
        if os.path.exists(questions_path):
            os.unlink(questions_path)

    return True

if __name__ == "__main__":
    test_local_api()